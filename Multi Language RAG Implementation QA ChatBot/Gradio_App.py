
import gradio as gr
from Query_Handler import QueryHandler  # Importing the QueryHandler class from Query_Handler.py


"""
This class encapsulates the Gradio application that serves as an interface 
to interact with the QueryHandler class. The application allows users to 
input a query and receive a response generated by the QueryHandler. The app 
is built using Gradio for a user-friendly web interface, which includes 
input fields, a response display, and a submit button.

"""

class QueryHandlerApp:
   

    def __init__(self):
        # Initialize the QueryHandler instance
        self.query_handler = QueryHandler()

    def get_response(self, query):
        """
        Get a response from the QueryHandler for the user's query.
        """
        return self.query_handler.generate_response(query)

    def launch_app(self):
        """
        Launch the Gradio app for interacting with the QueryHandler.
        This method sets up the interface, including input fields, buttons,
        and the response section.
        """
        # Define Gradio interface elements within the app
        with gr.Blocks(css=".container {background-color: #f9f9f9; font-family: Arial, sans-serif;}") as demo:
            gr.Markdown(
                """
                <div style="text-align: center; margin-bottom: 20px;">
                    <h1 style="color: #4A90E2;">Chatbot Assistant</h1>
                    <p style="font-size: 1.1em; color: #555;">Ask anything, and get instant, insightful answers!</p>
                </div>
                """
            )

            with gr.Row():
                query = gr.Textbox(placeholder="Type your question here...", label="Your Question", lines=2)
            
            # Response box (no need to use interactive=False)
            response = gr.Textbox(label="Chatbot's Response", lines=4, placeholder="The response will appear here...")
            submit_btn = gr.Button("Get Response", elem_id="submit-btn")

            submit_btn.click(fn=self.get_response, inputs=query, outputs=response)

            # Custom CSS for button styling
            gr.HTML(
                """
                <style>
                    #submit-btn {
                        background-color: #4A90E2;
                        color: white;
                        font-size: 1em;
                        padding: 8px 16px;
                        border: none;
                        cursor: pointer;
                        margin-top: 10px;
                    }
                    #submit-btn:hover {
                        background-color: #357ABD;
                    }
                </style>
                """
            )

        # Launch the Gradio interface
        #demo.launch(server_port=8000)
        # Server Name Means It listen on all networks this works for me in order to create docker 
        demo.launch(server_name="0.0.0.0", server_port=8000, share=True)


# Run the app
if __name__ == "__main__":
    # Class Object Creation 
    app = QueryHandlerApp()
    app.launch_app()